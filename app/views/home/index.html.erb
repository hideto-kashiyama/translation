<div class="container">
<div class="jumbotron text-center"> 
 

 

<meta charset="UTF-8">  

<div class="up_group"><button class="mic" type="submit" onclick ="recstart()">
 
          <i class="fa fa-microphone my-gray fa-5x"><span id="rscap">日本語でしゃべる</span></i>
          
</button>

<button class="mic1" type="submit" onclick ="recstarte()">
   <i class="fa fa-microphone fa-5x"><span id="rscape">英語でしゃべる</span></i>
</button></div>

<!--<button id="stcap" onclick="recstop()">Stop!</button></div>-->

<div><%= form_tag(url_for(:action => 'index'), :remote => true) do %>

  <div><%= text_area_tag :transval, nil, placeholder: "", id:"result_text" %></div>
  
  <div><label class="translabel" ></label>
  <button id="tbtn" onclick="trans()">翻訳</button>
  <button id="tbtnj" onclick="transmasterj()">翻訳j</button>
  
  
　　
  <%= text_field_tag :source, nil, placeholder: "", id:"source" %>
  <%= text_field_tag :target, nil, placeholder: "", id:"target" %>
  
  <% end %></div>  
   
   <div><%= form_tag(url_for(:action => 'index'), :remote => true) do %>
  
  <div><%= text_area_tag :speakval, nil, placeholder: "", id:"txtTarget" %></div>

<button class="mic2" type="submit" onclick ="speak()">
    
      <i class="fa fa-volume-up fa-2x"><span class="rcap">もう一度しゃべる</span></i>
 
</button>
　
          
    <button id="tclear" type="submit" onclick="txtclear()">テキスト削除</button><br>
　　 
    <button id= "tlink">この会話を登録して練習する</button>
    <!--<a href="/home/e100">登録済会話集</a>-->
    
 <div class="hide_group"><%= text_field_tag :fnval, nil, placeholder: "", id:"txtfn" %></div>
 <button id="aimbtn" onclick="AITalk_start()">AITalk</button>
  <!--  <button id="aibtn" onclick="AIT()">AITalkでもう一度しゃべる</button>-->

 <% end %></div>  
 
 <div><%= form_tag('/home/counts', method: :post, id: "toucnt") do %>
     
      <input type="text" id="gcnt" name="cntgoogle" size="10">
      <input type="text" id="acnt" name="cntait" size="10">
     
 <% end %></div>  
 
 
<!-- <button id="gcls" onclick="cls()">語数登録</button>
 <button id="cdel" onclick="cdel()">クッキー削除</button>
 <button id="lout" onclick="lout()">閉じる</button>-->
 
 
  </div>
  
  </div>
  
  </div>
  

<script>

var timer;

    function countDown() {
        cls();
     //alert("成功！")
        return true;
    }

    function restartTimer() {
        clearTimeout(timer);
        timer=setTimeout('countDown()',300000);
        return true;
         console.log("restart!");
    }
    function load() {
       timer=setTimeout('countDown()',300000);
        document.body.addEventListener("mousedown", restartTimer, false);
        document.body.addEventListener("keypress", restartTimer, false);
        console.log("操作あり")
    }
    document.addEventListener("DOMContentLoaded", load, false);
    
   
    
//クッキー設定
var g_cookie
var a_cookie
   //DOMの準備ができたら呼ばれる。
 $(function() {
     
     //alert(windowWidth);
        var gcookie = $.cookie('g_cookie');   //google語数
        var acookie = $.cookie('a_cookie');   //ATlk語数
      
       
        //google語数
           if(gcookie){
                
             $('#gcnt').val(gcookie);
             
           } else {
               
            $('#gcnt').val(0);
            
           }
           
          //ATalk語数
           if(acookie){
                
             $('#acnt').val(acookie);
             
           } else {
               
            $('#acnt').val(0);
            
           }
           
  
}); 



function cls() {//語数登録、クッキーを削除完了！

    $('#toucnt').submit();
    　
     console.log("クッキーを削除、語数登録完了！")
      $.removeCookie('g_cookie');
    　$.removeCookie('a_cookie');
    //alert("語数登録、クッキーを削除完了！");
        
 
}

function txtclear() {　　//テキストクリア 語数登録、クッキーを削除
    
     $('#result_text').val("");
     $('#txtTarget').val("");
     $('.translabel').hide();
     
     cls();
     
}


window.SpeechRecognition = window.SpeechRecognition || webkitSpeechRecognition;
var recognition = new webkitSpeechRecognition();//日本語
var recognitione = new webkitSpeechRecognition();//英語

 var gid; //言語判定　true: 日本語　false:日本語以外
 
// *ここから録音(音声認識)による翻訳開始
var flag_speech = 0;

var stcnt=0;//日本語しゃべるボタン押した回数
var stecnt=0; //英語しゃべるボタン押した回数
function recstart() { //日本語音声入力開始ボタン
    stcnt=stcnt+1;//日本語しゃべるボタン押した回数
    
    //押した回数偶数の場合
　　if ((stcnt % 2 ) == 0 ) {
　　    console.log(stcnt+":偶数");
　　    recstop();
　　    
　　} else {
　　    console.log(stcnt+":奇数");
　　
     $('#rscap').text("日本語認識中.........");
          　   　　　　
     //tenmetu('mic');//点滅
              
    $('#rscap').css('color','white'); 
    $('.mic').css('background-color', 'green');   
    
　　　　recognitione.stop();
　　　　$('#rscape').text("英語音声入力開始");
        $('#rscape').css('color', 'black');
        $('.mic1').css('background-color', 'white');
        $('.translabel').text("");
        
gid=true

recognition.lang = 'ja-JP';
recognition.interimResults = false;
recognition.continuous = true;

recognition.onsoundstart = function(){
  console.log("日本語認識中");
};

recognition.onspeechstart= function() {
 console.log("リスタート日本語認識中");  
}; 

recognition.onnomatch = function(){
  console.log("もう一度試してください");
};

recognition.onerror= function(){
  $('#result_text').text("エラー：日本語でお話しください");  
  console.log("エラー");
};

recognition.onend = function(){
  
   console.log("日本語認識完了")
  
};
 
recognition.onresult = function(event){
    var results = event.results;
    for (var i = event.resultIndex; i<results.length; i++){
      if(results[i].isFinal) {
        $('#result_text').text(results[i][0].transcript);
        console.log(gid);
        //$("#stcap").click(); //音声入力停止
        
        $("#tbtn").click();//英訳開始　trans()
         console.log("英訳完了");
         recstop();
      }
    }
};

   flag_speech = 0;
  
   recognition.start();
}

}

var flag_speeche = 0;
 
function recstarte() {　//英語音声入力開始ボタン
 　　stecnt=stecnt+1;//英語ボタン押した回数
     //押した回数偶数の場合
　　if ((stecnt % 2 ) == 0 ) {
　　    console.log(stecnt+":偶数");
　　    recstop();
　　    
　　} else {
　　    console.log(stecnt+":奇数");
    
    
   $('#rscape').text("英語認識中.........");
  　  　　　
      //tenmetu('mic');//点滅
　 $('#rscape').css('color', 'white');
　 $('.mic1').css('background-color', '#FF69B4'); 
　 
        recognition.stop();
  　　 　 $('#rscap').text("日本語音声入力開始");
        $('#rscap').css('color', 'black');
        $('.mic').css('background-color', 'white');
        $('.translabel').text("");
        
  gid=false
  
   var val = $('[name=sg]').val();
       var values=val.split(','); // , 区切りで配列を取得
     console.log(values[1])
recognitione.lang = values[1];

recognitione.interimResults = false;
recognitione.continuous = true;
 
recognitione.onsoundstart = function(){
  console.log("英語認識中");
}; 

recognitione.onspeechstart= function() {
 console.log("リスタート日本語認識中");  

};
recognitione.onnomatch = function(){
   console.log("もう一度試してください");
};
recognitione.onerror= function(){
    
  $('#result_text').text("エラー：英語でお話しください");  
  console.log("エラー");
  
};
recognitione.onend = function(){
 console.log("英語認識完了");
 
};
 
recognitione.onresult = function(event){
    var resultse = event.results;
    for (var i = event.resultIndex; i<resultse.length; i++){
      if(resultse[i].isFinal) {
       　$('#result_text').text(resultse[i][0].transcript);
       　 console.log(gid);
         //$("#stcap").click(); //音声入力停止
         
         $("#tbtnj").click();//和訳訳開始
         console.log("和訳完了");
         recstop();
       
      }
    }
    
};
    flag_speeche = 0;
    recognitione.start();
}

}

function recstop() {　//音声入力停止
　      
　      recognition.stop();
　    　recognitione.stop();
　      $('#rscap').text("日本語でしゃべる");
        $('#rscap').css('color', 'black');
        $('.mic').css('background-color', 'white');
        $('#rscape').text("英語でしゃべる");
        $('#rscape').css('color', 'black');
        $('.mic1').css('background-color', 'white');
        $('.translabel').text("");
　      
 }

   /*ここまで録音による翻訳*/
  

//＊ここから#result_textに文字を直接入力またはコピペした場合の翻訳

//$(function() {
  
 　$("#result_text").keyup(function(e){
 　   
     if(e.which == 13){　//エンターキー　アップ時
               //result_text"の言語判定　gid取得
         　　　　　let error;
                let value = $(this).val();
                
                if(value.match(/[ぁ-ん]/g)){
                    
                  error = true;
                } else if (value.match(/[\u4E00-\u9FFF]/)) {
                    
                   error = true; 
                  //m = t.match(/[\u4E00-\u9FFF]/); 
                  
                }
                
                if(error){
                    
                    gid=true;
                    console.log("japanese!"+gid);
                　  
                    $("#tbtn").click();//翻訳開始
                    
                }else{
                    
                    gid=false;
                    console.log("english!"+gid);
                   
                    $("#tbtnj").click();//翻訳開始
                    
                }
                
                //ここまで#result_textに文字を直接入力またはコピペした場合の翻訳
　　　　　
     }
     
　});

　$("#txtTarget").keyup(function(e){
　    
　    if(e.which == 13){　//エンターキー　アップ時
　    console.log("up!")
　    
　      $("#aimbtn").click();//
　    
　    }


});
	
//AITalkのmp3削除


//AITalk音声合成
function AITalk_start() {
    
        //ファイル名作成  
    var dt = new Date();
    
    var y= dt.getFullYear();
    
    //1月が0、12月が11。そのため+1をする。
    var m = dt.getMonth()+1;
    
    var d= dt.getDate();
    
    var h = dt.getHours();
    
    var m = dt.getMinutes();
    
    var s= dt.getSeconds();
    
    var fn ="" + y + m + d + h + m + s;//日付数字のみ連結
    
    $('#txtfn').val(fn);
    
     <%= atk %>
     
       speak();
       
}

//AITalkでもう一度しゃべる
function AIT() {
 
    
   var txt = $('#txtfn').val();
         var mp3fn="/tempmp3/" + txt + ".mp3";
         
            console.log(mp3fn);

     setTimeout(function(){  
           audioElem = new Audio();
           audioElem.src = mp3fn;
           audioElem.play();
      
           audioElem.addEventListener("ended", function(e) {
               
              console.log("end!");
              audioElem.muted = true;
             audioElem.pause();
             audioElem.currentTime = 0;
             
              var cnt =$("#txtTarget").val().length
                var acnt = $('#acnt').val();
                
                   if (acnt==0) {
                       
                     $("#acnt").val(cnt);
                     
                   } else {
                       
                       $('#acnt').val(parseInt(cnt) + parseInt(acnt));
                     
                   }
                   
                    $.cookie('a_cookie', $('#acnt').val()); 
            
          });  
          
     },500); 
 
        
   
}

 var radio_sp

function transmasterj() {
    
    
  
      radio_sp = $("#select_jp").val(); //$("input[name='sp']:checked").val();　//日本語音声選択値 0 :AITalk   2 :google
         
         if ( radio_sp==2 ) {
             
            console.log("google")
            transj();//google
          
         } else {
             
            console.log("AIT")
            trans_aitj()//AITalk
         
         }   
  
}

//和英翻訳→英語音声合成google

function trans() {
     $("#source").val("ja");
        // 選択されている対話言語value属性値を取り出す
      var val = $('[name=sg]').val();
       var values=val.split(','); // , 区切りで配列を取得
       $("#target").val(values[0]); 
 
    
    
  // $("#txtTarget").val("");
     var txt1;
    
　   txt1="" //"翻訳中......"
　   //wfin(txt1,'translabel');//1文字ずつタイプライター風に表示する
　   
  //helpers/home_helper.rb  translate英訳　translatej 和訳
  
       var transtext="<%= translate %>";
  
 var txt=transtext.replace( /&amp;#39;/g , "'" );

 $('#txtTarget').val(txt);
 
    var text =  $('#txtTarget').val();
    txt1="";
        $('.translabel').text("");
        $('.translabel').text("翻訳完了！");
        tenmetut('translabel');//点滅
        
   
    
}


//英和翻訳→日本語音声合成google
function transj() {
    
    // 選択されている対話言語value属性値を取り出す
      var val = $('[name=sg]').val();
      var values=val.split(','); // , 区切りで配列を取得
      console.log(values[0]);
      $("#source").val(values[0]);
        
       $("#target").val("ja"); 
  
     var txt1;
    
　   txt1=""//"翻訳中......"
　   //wfin(txt1,'translabel');//1文字ずつタイプライター風に表示する
　   
  //helpers/home_helper.rb  translate英訳　translatej 和訳
  
       var transtext="<%= translatej %>";
  
 var txt=transtext.replace( /&amp;#39;/g , "'" );

 $('#txtTarget').val(txt);
 
    var text =  $('#txtTarget').val();
    
     txt1="";
        $('.translabel').text("");
        $('.translabel').text("翻訳完了！");
        tenmetut('translabel');//点滅
    
   
}

//英和翻訳→日本語音声合成AITalk
function trans_aitj() {
    
     // 選択されている対話言語value属性値を取り出す
      var val = $('[name=sg]').val();
      var values=val.split(','); // , 区切りで配列を取得
      console.log(values[0]);
      $("#source").val(values[0]);
        
       $("#target").val("ja"); 
  
    
     $('#kb').val(0);//語数登録区分　google
     var txt1;
    
　txt1="" //"翻訳中..."
　  // wfin(txt1,'translabel');//1文字ずつタイプライター風に表示する
　   
  //helpers/home_helper.rb  translate英訳　translatej 和訳
   
 var transtext ="<%= translatej %>";
  
 var txt=transtext.replace( /&amp;#39;/g , "'" );

 $('#txtTarget').val(txt);

//$("#aimbtn").click();//AITalk ruby音声
      
 
}

$(function(){
    
    $('#blink').click(function() {
        
        location.href="/home/master";
    
     });
});

$(function(){
    
    $('#tlink').click(function() {
        
        recstop();//録音停止
        
        var param = $("#result_text").val();
        param = encodeURIComponent(param);
         
        var paramt = $("#txtTarget").val();
        paramt= encodeURIComponent(paramt);
        
          //文字が入ってる時だけ実行
        if (param != ""){
             
            if (paramt != ""){
      
             window.location.href="/home/ctg?param=" + param +"&" + "?paramt=" + paramt;
      　　　
      　　　 }else{
      　　　 
      　　　 alert('翻訳文がありません' );
      　　　     
      　　　}
      　　　
        }else{
            
            
　            alert('テキストがありません');
            
        }　
    
       
    });
});

//もう一度しゃべる
function speak() {
    
 radio_sp = $("#select_jp").val();// $("input[name='sp']:checked").val();　//日本語音声選択値 0 :AITalk 2 :google
    
 var text = $('#txtTarget').val();
 
 if (text!="") {
     
           var uttr = new SpeechSynthesisUtterance();
            uttr.text = text;
            
   if ( radio_sp==2 ) { //google

            if (gid) {
                
                uttr.lang = 'en-US';
                speechSynthesis.speak(uttr);
            
                
              } else {
                 
                uttr.lang ='ja-JP'; 
                speechSynthesis.speak(uttr);
                
             }
    
             
   } else {
       if (gid) {
                
                uttr.lang = 'en-US';
                speechSynthesis.speak(uttr);
                
              } else {
                  
               console.log("AITalk")
             //$("#aibtn").click();
              
              AIT();
                
             }
     
   }
   
    uttr.onend = function (event) {
       
             console.log('喋った時間：' + event.elapsedTime + 's');
             var tm =event.elapsedTime
             console.log(parseInt(tm));
             setTimeout(function(){
                console.log('終了' + $("#txtTarget").val().length);
                
                
            
             },parseInt(tm));
             
              speechSynthesis.cancel();
              console.log("cancel!")
            
    }
        
  
  
  } else {
      
      alert("テキストがありません。")
  }
 
}


 function wfin(txt,idv) { //タイプライターのようにテキストを1文字ずつ表示させる関数
     　　　//txt:テキスト　idv 囲む要素のid
     　　　    var txtArr = txt.split("");
            var count = 0;
        
            var txtCount = function() {
                var timer = setTimeout(txtCount, 250);
                $('.'+idv).append(txtArr[count]);
                count++;
                if (count == txtArr.length) {
                    clearTimeout(timer);
                }
            }
        
            txtCount();

    }
    
　//jquery.flicker.jsを使った要素点滅
function tenmetu(v) {　//日本語
    
        $('.'+v).flicker({
            'reps': 2, 
            'pause': 200, 
            'delay': 800,
             'color': '#CCFFCC'   
           
        });
        
         /*'reps': 2, //点滅する回数です。
            'pause': 200, //点滅して色がついている時の時間の長さです'color': '#CCFFCC'   
            'delay': 800, //点滅する間隔です
            'color': '#CCFFCC' //色を設定できます*/
        
}  
function tenmetue(v) {　//英語
    
        $('.'+v).flicker({
            'reps': 2, 
            'pause': 200, 
            'delay': 800,
             'color': '#FFDDFF'     
           
        });
        
         /*'reps': 2, //点滅する回数です。
            'pause': 200, //点滅して色がついている時�������時間の長さです'color': '#CCFFCC'   
            'delay': 800, //点滅する間隔です
            'color': '#e55' //色を設定できます*/
        
}  


function tenmetut(v) {　//翻訳完了！
    
        $('.'+v).flicker({
            'reps': 5, 
            'pause': 200, 
            'delay': 800,
             'color': '#CCFFFF'     
           
        });
        
         /*'reps': 2, //点滅する回数です。
            'pause': 200, //点滅して色がついている時の時間の長さです'color': '#CCFFCC'   
            'delay': 800, //点滅する間隔です
            'color': '#e55' //色を設定できます*/
        
}  

//jquery.flicker.js プラグイン
(function( $ ){

	$.fn.flicker = function(options){

		var settings = {
			'reps'		: 10,
			'pause'		: 100,
			'delay'		: 400,
			'color'		: '#f00'
		};

		if ( options ) { 
			$.extend( settings, options );
		}
	
		return this.each( function() {

			$this = $(this);
			
			flashScreen($this, settings.reps, settings.pause, settings.delay, settings.color); 
		});
	};

	flashScreen = function(obj, reps, pause, delay, color) {
		if (reps == 0)
			return false;

		_reps = reps;
		_pause = pause;
		_delay = delay;
		_color = color;
		_this = obj;
			
		background = obj.css('background-color');
		obj.css('background-color', color);
		setTimeout("_this.css('background-color', background);", pause);

		setTimeout('flashScreen(_this, _reps - 1, _pause, _delay, _color);', _delay);
	}	
		
})(jQuery);
　　

</script>

 <!-- 
class一覧
up_group



音声一覧
 0   Google US English en-US 
 1   Google UK English Male en-GB 
 2   Google UK English Female en-GB 
 3   Google Español es-ES 
 4   Google Français fr-FR 
 5   Google Italiano it-IT 
 6   Google Deutsch de-DE 
 7   Google 日本人 ja-JP 
 8   Google 한국의 ko-KR 
 9   Google 中国的 zh-CN 
 10  Alex en-US 
 11  Agnes en-US 
 12  Albert en-US 
 13  Bad News en-US 
 14  Bahh en-US 
 15  Bells en-US 
 16  Boing en-US 
 17  Bruce en-US 
 18  Bubbles en-US 
 19  Cellos en-US 
 20  Deranged en-US 
 21  Fred en-US
 22  Good News en-US 
 23  Hysterical en-US 
 24  Junior en-US 
 25  Kathy en-US 
 26  Pipe Organ en-US 
 27  Princess en-US 
 28  Ralph en-US 
 29  Trinoids en-US 
 30  Vicki en-US 
 31  Victoria en-US 
 32  Whisper en-US 
 33  Zarvox en-US  -->      

